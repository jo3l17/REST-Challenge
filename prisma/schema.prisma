// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              Int @id @default(autoincrement())
  name            String @db.VarChar(50)
  email           String @unique
  temporalEmail   String?
  password        String
  verifiedAt      DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime? @updatedAt
  role            Role @default(user)
  tokens          Token[]
  account         Account?
}

model Account {
  id              Int @id @default(autoincrement())
  isEmailPublic   Boolean @default(false)
  isNamePublic    Boolean @default(false)
  posts           Post[]
  comments        Comment[]
  user            User @relation(fields: [userId],references: [id], onDelete:Cascade)
  userId          Int @unique
  reports         Report[]
  postLikes       PostLike[]
  commentLikes    CommentLike[]
}

model Token {
  id              Int @id @default(autoincrement())
  token           String
  expirationDate  DateTime
  createdAt       DateTime @default(now())
  user            User @relation(fields: [userId],references: [id], onDelete:Cascade)
  userId          Int
}

model Post {
  id              Int @id @default(autoincrement())
  title           String @db.VarChar(100)
  content         String
  published       Boolean
  likes           Int @default(0)
  dislikes        Int @default(0)
  likedBy         PostLike[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime? @updatedAt
  account         Account @relation(fields: [accountId],references: [id], onDelete:Cascade)
  accountId       Int
  comments        Comment[]
  reports         Report[]
}

model PostLike {
  id              Int @id @default(autoincrement())
  account         Account @relation(fields: [accountId],references: [id], onDelete: Cascade)
  accountId       Int
  post            Post @relation(fields: [postId],references: [id], onDelete: Cascade)
  postId          Int
  type            Actions
}

model Comment {
  id              Int @id @default(autoincrement())
  content         String
  published       Boolean
  likes           Int @default(0)
  dislikes        Int @default(0)
  likedBy         CommentLike[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime? @updatedAt
  account         Account @relation(fields: [accountId],references: [id], onDelete: Cascade)
  accountId       Int
  post            Post @relation(fields: [postId],references: [id], onDelete: Cascade)
  postId          Int
  reports         Report[]
}

model CommentLike {
  id              Int @id @default(autoincrement())
  account         Account @relation(fields: [accountId],references: [id], onDelete: Cascade)
  accountId       Int
  comment         Comment @relation(fields: [commentId],references: [id], onDelete: Cascade)
  commentId       Int
  type            Actions
}


model Report {   
  id              Int @id @default(autoincrement())
  title           String @db.VarChar(100)
  content         String
  type            ReportType
  createdAt       DateTime @default(now())
  comment         Comment? @relation(fields: [commentId],references: [id], onDelete: Cascade)
  commentId       Int?
  post            Post? @relation(fields: [postId],references: [id], onDelete: Cascade)
  postId          Int?
  account         Account @relation(fields: [accountId],references: [id], onDelete: Cascade)
  accountId       Int
}

enum Actions {
  like
  dislike
}

enum Role {
  user
  moderator
}

enum ReportType {
  post
  comment
}